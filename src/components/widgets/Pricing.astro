---
import { Icon } from 'astro-icon/components';
import Button from '~/components/ui/Button.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Pricing as Props } from '~/types';

const {
  title = '',
  subtitle = '',
  tagline = '',
  prices = [],

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />
  <div class="flex items-stretch justify-center">
    <!-- Container for Cards -->
    <div class="flex flex-wrap gap-4 justify-center dark:text-white">
      {prices.map(({ title, subtitle, price, period, items, callToAction, hasRibbon = false, ribbonTitle}) => (
        <div class="flex-shrink-0 w-full sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/4">
          <div class="h-full flex flex-col justify-between rounded-lg backdrop-blur border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 shadow p-6 relative">
            {hasRibbon && ribbonTitle && (
              <div class="absolute right-[-5px] top-[-5px] z-[1] h-[100px] w-[100px] overflow-hidden text-right">
                <span class="absolute top-[19px] right-[-21px] block w-full rotate-45 bg-green-700 text-center text-[10px] font-bold uppercase leading-5 text-white shadow-[0_3px_10px_-5px_rgba(0,0,0,0.3)]">
                  {ribbonTitle}
                </span>
              </div>
            )}
            <div class="flex-1">
              {title && (
                <h3 class="text-center text-xl font-semibold uppercase mb-2">{title}</h3>
              )}
              {subtitle && <p class="text-center font-light sm:text-lg text-gray-600 dark:text-slate-400">{subtitle}</p>}
              {(price || period) && (
                <div class="my-8">
                  {price && (
                    <div class="flex items-center justify-center text-center mb-1">
                      <span class="text-5xl">$</span>
                      <span class="text-6xl font-extrabold">{price}</span>
                    </div>
                  )}
                  {period && (
                    <span class="text-base leading-6 lowercase text-gray-600 dark:text-slate-400">{period}</span>
                  )}
                </div>
              )}
              {items && (
                <ul class="my-8 space-y-2 text-left">
                  {items.map(({ description, icon }) => (
                    description && (
                      <li class="mb-1.5 flex items-start space-x-3 leading-7">
                        <div class="rounded-full bg-primary mt-1">
                          <Icon name={icon ? icon : 'tabler:check'} class="w-5 h-5 font-bold p-1 text-white" />
                        </div>
                        <span>{description}</span>
                      </li>
                    )
                  ))}
                </ul>
              )}
            </div>
            {callToAction && (
              <div class="mt-auto flex justify-center">
                {typeof callToAction === 'string' ? (
                  <Fragment set:html={callToAction} />
                ) : (
                  callToAction.href && (
                    <Button 
                      {...(hasRibbon ? { variant: 'primary' } : {})}
                      {...callToAction}
                    />
                  )
                )}
              </div>
            )}
          </div>
        </div>
      ))}
    </div>
  </div>
</WidgetWrapper>
