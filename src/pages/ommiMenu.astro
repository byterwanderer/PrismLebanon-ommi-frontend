---
import ProductCard from '~/components/widgets/ProductCard.astro';
import { supabase } from '~/lib/supabase';
import Layout from '~/layouts/PageLayout.astro';
import HeroText from '~/components/widgets/HeroText.astro';

const metadata = {
  title: 'Ummi\'s Menu',
  ignoreTitleTemplate: true,
};

// Fetch menu items, categories, and tags from Supabase
let { data: menu_items, error: menuError } = await supabase
  .from('menu_items')
  .select('*');

let { data: category_links, error: categoryLinksError } = await supabase
  .from('menu_items_item_category_links')
  .select('*');

let { data: item_categories, error: itemCategoriesError } = await supabase
  .from('item_categories')
  .select('*');

// Fetch item images from files table
// let { data: item_images, error: item_image_Error } = await supabase
//   .from('item_images')
//   .select('*');


// let { data: item_image_links, error: item_image_linksError } = await supabase
//   .from('menu_items_item_image_links')
//   .select('*')


let { data: files, error } = await supabase
  .from('files')
  .select('*')

  // Fetch item tags and tag links
let { data: item_tags, error: itemTagsError } = await supabase
  .from('item_tags')
  .select('*');

let { data: tag_links, error: tagLinksError } = await supabase
  .from('menu_items_item_tags_links')
  .select('*');

// Error handling
if (menuError) console.error('Error fetching menu items:', menuError);
if (categoryLinksError) console.error('Error fetching category links:', categoryLinksError);
if (itemCategoriesError) console.error('Error fetching item categories:', itemCategoriesError);
// if (item_image_Error) console.error('Error fetching Item Images:', item_image_Error);
if (itemTagsError) console.error('Error fetching item tags:', itemTagsError);
if (tagLinksError) console.error('Error fetching tag links:', tagLinksError);
// if (item_image_linksError) console.error('Error fetching Item Image Links:', item_image_linksError);
if (error) console.error('Error fetching files:', error);

// Group menu items by categories and associate images
const categorizedMenuItems = (item_categories || []).map(category => {
  const itemsInCategory = (category_links || [])
    .filter(link => link.item_categorie_id === category.id)
    .map(link => {
      const item = (menu_items || []).find(menuItem => menuItem.id === link.menu_item_id);

      // Fetch tags for the item
      const tagsForItem = (tag_links || [])
        .filter(tagLink => tagLink.menu_item_id === item.id)
        .map(tagLink => {
          const tag = (item_tags || []).find(tag => tag.id === tagLink.item_tag_id);
          return tag ? { name: tag.tag_name, color: tag.tag_color_hex } : null;
        })
        .filter(tag => tag); // Remove any null tags

      // Fetch image for the item
      const imageData = (files || []).find(file => file.id === item.id);

      return {
        ...item,
        tags: tagsForItem || [],
        item_image_url: imageData ? imageData.url : '', // Ensure the image URL is a string
      };
    });

  return {
    categoryName: category.category_name,
    categorySubtext: category.category_subtext,
    categoryDescription: category.category_description,
    items: itemsInCategory || [],
  };
});
---

<Layout metadata={metadata}>
  <HeroText id="menuTitle">
    <Fragment class="menuTitle" slot="title">Ummi's Brunch Menu</Fragment>
  </HeroText>
  <div class="menu">
    {categorizedMenuItems?.map(category => (
      <div class="category" class:category-name={category.categoryName}>
        <h1>{category.categoryName}</h1>
        <h2>{category.categorySubtext}</h2>
        <p>{category.categoryDescription}</p>
        <div class="menu-grid">
          {category.items.map(item => (
            <ProductCard
              title={item.item_name}
              description={item.item_description}
              price={item.item_price}
              tags={item.tags.map(tag => ({
                ...tag,
                class: `tag-${tag.name.replace(/\s+/g, '-').toLowerCase()}`
              }))}
              image={item.item_image_url}
            />
          ))}
        </div>
      </div>
    ))}
  </div>
  <div class="notice-container">
    <div class="notice-title">ALLERGY NOTICE:</div>
    <div class="notice-text">
      Our food may contain or come into contact with wheat, milk, eggs, peanuts, tree nuts, soybean, sesame & dairy products. Please inform your server if you have any type of allergy.
    </div>
  </div>
</Layout>

<style>
  .menu {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem;
  }

  .menu-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr); /* Two equal columns */
    gap: 1.2rem;
    max-width: 1200px; /* Maximum width for the grid layout */
    /* width: 100%; */
    /* padding-top: 2rem; */
  }

  .item-card {
    text-align: left !important; /* Left-aligns text within each item */
    align-items: left;
  }

  .item-card h3 {
    margin-bottom: 0.5rem;
    color: #2e518b;
  }

  .item-card p {
    margin: 0.5rem 0;
    color: #444;
  }

  .item-card .price {
    font-weight: bold;
    color: #000;
  }

  .item-card .tag {
    display: block;
    margin-top: 0.5rem;
    font-size: 0.9rem;
  }

  .menu h1,
  .menu h2,
  .menu p {
    text-align: center; /* Center title, subtitle, and description */
    margin: 0.5rem 0;
  }

  .menu h1 {
    font-size: 2rem;
    color: #2e518b;
  }

  .menu h2 {
    font-style: italic;
    font-size: 1.25rem;
    color: #666;
  }

  .menu p {
    color: #444;
    padding-bottom: 1.5rem;
  }

  .notice-container {
    border-top: 1px solid #b0b0b0;
    border-bottom: 1px solid #b0b0b0;
    padding: 16px 0;
    text-align: center;
    font-family: Arial, sans-serif;
    color: #333333;
  }

  .notice-title {
    font-weight: bold;
    font-size: 18px;
    color: #0a3e6e;
    margin-bottom: 8px;
  }

  .notice-text {
    font-size: 14px;
  }

  .menuTitle {
    color: #0a3e6e;
  }
</style>
